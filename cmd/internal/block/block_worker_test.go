package block

import (
	"sync"
	"testing"
	"time"

	"github.com/cpurta/eth-scanner/cmd/internal/transaction"
	"github.com/jarcoal/httpmock"
)

func TestNewBlockWorker(t *testing.T) {
	transactions := make(chan *transaction.TransactionResult, 0)
	wg := &sync.WaitGroup{}

	worker := NewBlockWorker("http://localhost:8545", transactions, wg)

	if worker == nil {
		t.Error("Expected worker to not be nil but got", worker)
	}
}

func TestBlockWorkerSetBlockRange(t *testing.T) {
	transactions := make(chan *transaction.TransactionResult, 0)
	wg := &sync.WaitGroup{}

	worker := NewBlockWorker("http://localhost:8545", transactions, wg)

	worker.SetBlockRange(NewBlockRange(0, 100))

	if min := worker.blockRange.Min(); min != 0 {
		t.Error("Expected worker block range min to be 0 but got", min)
	}

	if max := worker.blockRange.Max(); max != 100 {
		t.Error("Expected worker block range min to be 100 but got", max)
	}
}

func TestBlockWorkerGetProgress(t *testing.T) {
	transactions := make(chan *transaction.TransactionResult, 5)
	wg := &sync.WaitGroup{}

	worker := NewBlockWorker("http://localhost:8545", transactions, wg)

	completed, total := worker.GetProgress()

	if completed != 0 {
		t.Error("Expected worker complete blocks to be 0 but got", completed)
	}

	if total != 0 {
		t.Error("Expected worker total blocks to be 0 but got", total)
	}
}

func TestBlockWorkerPushTransactions(t *testing.T) {
	transactions := make(chan *transaction.TransactionResult, 5)
	wg := &sync.WaitGroup{}

	worker := NewBlockWorker("http://localhost:8545", transactions, wg)

	transactionResults := []*transaction.TransactionResult{
		&transaction.TransactionResult{
			Hash: "0xbeefcafe",
		},
		&transaction.TransactionResult{
			Hash: "0xdeadbeef",
		},
	}

	worker.pushTransactions(transactionResults)

	if len := len(transactions); len != 2 {
		t.Error("Expected that transactions channel has at least 2 items in it but has", len)
	}

	worker.Stop()

	worker.pushTransactions(transactionResults)

	if len := len(transactions); len != 2 {
		t.Error("Expected that transactions channel should still be 2 items in it but has", len)
	}
}

func TestBlockWorkerGetBlock(t *testing.T) {
	httpmock.Activate()
	responder := httpmock.NewBytesResponder(200, []byte(`{"jsonrpc":"2.0","id":1,"result":{"difficulty":"0x41d67cf5a","extraData":"0x476574682f76312e302e302f6c696e75782f676f312e342e32","gasLimit":"0x1388","gasUsed":"0x0","hash":"0x3d4051de1b8650b98ffdbe4144b68e32a903b98ea5cb16cd843cbda9098af201","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","miner":"0x28921e4e2c9d84f4c0f0c0ceb991f45751a0fe93","mixHash":"0xbd63c2291cb8f0b51902d579ca37519daa774b7da7938dd4281ebb294cebd2cc","nonce":"0xc157fbcb50494d18","number":"0x48","parentHash":"0xc7553e669b7cf2fdc8c1608764d18eca3d672966280cfcfe33d5debf46aad92b","receiptsRoot":"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421","sha3Uncles":"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347","size":"0x219","stateRoot":"0xf94f7ffbff156315f5b0c2a8398f644bf7e5b0db441a85f3b0631ed119b66fe1","timestamp":"0x55ba43aa","totalDifficulty":"0x12751e31509","transactions":[],"transactionsRoot":"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421","uncles":[]}}`))

	httpmock.RegisterResponder("POST", "http://localhost:8545", responder)

	transactions := make(chan *transaction.TransactionResult, 5)
	wg := &sync.WaitGroup{}

	worker := NewBlockWorker("http://localhost:8545", transactions, wg)

	blockResult, err := worker.getBlock("0x48")
	if err != nil {
		t.Error("Was not expecting an error when making getBlock request but got", err.Error())
	}

	if blockResult.ID != 1 {
		t.Error("expecte block result id to be 1 but got", blockResult.ID)
	}
}

func TestBlockWorkerStart(t *testing.T) {
	httpmock.Activate()
	responder := httpmock.NewBytesResponder(200, []byte(`{"jsonrpc":"2.0","id":1,"result":{"difficulty":"0xafc56ec6c95","extraData":"0xd983010302844765746887676f312e342e328777696e646f7773","gasLimit":"0x2fefd8","gasUsed":"0x1cc547","hash":"0x39ee4495ef25bab2b8811ebb76646f29eab8c472c104e986b9f4d5249e9ac45e","logsBloom":"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","miner":"0xf8b483dba2c3b7176a3da549ad41a48bb3121069","mixHash":"0x15b0a889e0168bfe5e7cd820c56af1d94b8283ccf88f14326b84cec90851acf4","nonce":"0xe9c220d4a7630112","number":"0xf1635","parentHash":"0x733ef9fcd40125c927d6e611400afd2af15d14884a286062b3182e7bb2d994e9","receiptsRoot":"0x6e0a9fb99bbb77a156024ae036aeacf782923ecbff47f8a642dafd7bd9d9a86a","sha3Uncles":"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347","size":"0x1f00","stateRoot":"0x77b5f8b1079171d2b61b9a46bc4144da219d223b621cabc7bfac879969a6da1c","timestamp":"0x56bcc15b","totalDifficulty":"0x612ad79110375a57","transactions":[{"blockHash":"0x39ee4495ef25bab2b8811ebb76646f29eab8c472c104e986b9f4d5249e9ac45e","blockNumber":"0xf1635","from":"0x2910543af39aba0cd09dbb2d50200b3e800a63d2","gas":"0x186a0","gasPrice":"0xba43b7400","hash":"0x4251d7717f998c02066854c3173c350f7d073a11eac440d72163c4feb13eeb7f","input":"0x","nonce":"0x1e58","r":"0x8dcc9dad5ff990ff2f542a3c5ccc26288a813127abb740eba85e2b2059c23481","s":"0x7aa5fb3f0785bb422278df1b0033816c5aa941554ea84733a87b3226be045921","to":"0xb69f747788d0911bb798dccb7572a7d14a67d31f","transactionIndex":"0x0","v":"0x1c","value":"0x6f0f3b0f5b1f8000"},{"blockHash":"0x39ee4495ef25bab2b8811ebb76646f29eab8c472c104e986b9f4d5249e9ac45e","blockNumber":"0xf1635","from":"0xd1220a0cf47c7b9be7a2e6ba89f429762e7b9adb","gas":"0x1df9df","gasPrice":"0xba43b7400","hash":"0x2f121b55188e408a274a11e3d59648f8a71a5be99f830576be350448aa5012f3","input":"","nonce":"0x65","r":"0xf7b0777c7aa4ca8d950035024fd543032892e3a04970fcf9a13375ad1e1db5a8","s":"0x58163a67bf886b0593cf9bf609b9285e9aee9e8c5eea66cb6f4f4ead14e40617","to":null,"transactionIndex":"0x1","v":"0x1c","value":"0x0"}],"transactionsRoot":"0xb31a34eb1133d2081ce28c85905e0503a0c94c88726bc38bf1562b4c7b99d75f","uncles":[]}}`))

	httpmock.RegisterResponder("POST", "http://localhost:8545", responder)

	transactions := make(chan *transaction.TransactionResult, 5)
	wg := &sync.WaitGroup{}

	worker := NewBlockWorker("http://localhost:8545", transactions, wg)
	worker.SetBlockRange(NewBlockRange(99, 100))

	go worker.Start()

	time.Sleep(time.Second * 5)

	worker.Stop()

	if len := len(transactions); len != 2 {
		t.Error("expected at least one transaction in transactions channel but got", len)
	}
}
